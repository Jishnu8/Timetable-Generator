/*naming convention: eg. subject_name
				         period_index
                         no capital letters */

Teacher (input):
	Name (string)
	Array of ‘Course’ objects
	Restrictions 

Course:
	Students (string array)
	Subject Name
	Number of periods (int)
	Location (generating with alg)
	Periods Assigned (generated with alg)
	int noOfPeriodsAssigned (default = 0)

Location:
    Building Name
    Room No
    Capacity 

Clas:
    Teacher
    Int courseIndex	(will be changed to pointer and make changes in all places accordingly)
    Int periodindex (default to -1)
    Int classSpacing (default ceil(n/p)) n - no of days in the week p - no of peridos for that subject
    Students (string array) (will be accessed using course pointer)
    backtrackRestrictions[]

Period:
    Clas periodsubjectlist[n]
    Int periodsubjectindex to know how many classes this period has, defaulted to -1
    Int PreferabilityScore

Metrics to take into account:
    Congestion (period/day) (3)
    Class Spacing (1)  floor(n/p)
    Preferability (2)

Conditions for placement: 
    No overlapping teachers/students
    Within teacher restrictions
    Classroom available


Backtracking algorithm:

//global variables
Period timetable[42]
Clas classarray[] 
Int classIndex = 0
Int capacity
int Possibilities[7]
int possibilitiesIndex;


While 1:
	previousIndex = course_array[classarray[classIndex].courseIndex].periodAssigned[noOfPeriodsAssigned]
    //classSpacing is atrribute of classarray[classIndex]
	indexSkipped = (classSpacing) * 7 - previousIndex % 7
    possibilitiesIndex = -1 

	for i,  previousIndex + indexSkipped -> previousIndex + indexSkipped + 6:
		//function 1 start
		// input : start_index, end_index
		// task: calculate possibilities_index and fill possibilities array
		If (conditions for placement are met):
			possibilitiesIndex += 1
			possibilities[possibilitiesIndex] = i
		//function 1 end

	if (possibilitiesIndex == -1){
		//function 2 start
		classSpacing -= 1
		if (classSpacing == 0){
			If classIndex = 0:
				Return
			
			
		classarray[classIndex].backtrackRestrcition.empty()
        classIndex -= 1
		classarray[classIndex].backtrackRestriction.append(classarray[classIndex].periodIndex)
		classarray[classIndex].periodIndex = -1
        timetable[classarray[classIndex].periodindex].subjectlistindex -= 1
		course_array[classarray[classIndex].courseIndex].noOfPeriodsAssigned -= 1
		//function 2 end
		}
		continue
    }

	//function 3 start
    sort(possiblities, 0, possibilitiesIndex) according to preferability
	//function 3 end
	//function 4 start
    int finalPeriods[possibilitiesIndex+1];
    finalPeriods[0] = possiblities[possiblitiesIndex]
    For i, possiblitiesIndex - 1->0:
        If timetable[possibilties[i].preferabilityScore < finalPeriods[0].preferabilityScore:
            Break
        finalPeriods.append(i)
	//function 4 end

	//function 3 start
    sort(finalPeriods, 0, finalPeriodIndex) according to congestion
	//function 3 end 
    Int bestIndex = finalPeriods[0]

	//function 5 start
    put classarray[classIndex] in timetable[bestIndex]
    classarray[classIndex].periodindex = bestIndex
    timetable[bestIndex].subjectlistindex += 1
	course_array[classarray[classIndex].courseIndex].periodAssigned[noOfPeriodsAssigned++] = bestIndex
	//function 5 end
	classIndex += 1

	if (classIndex == classArray.length){
		//function 6 start
		output solution
		//function 6 end
		classIndex -= 1
		//function 7 start
		remove classarray[classIndex] in timetable[bestIndex]
		classArray[classIndex].backtrackRestrcition.append(bestIndex)
		classArray[classIndex].periodIndex = -1
		timetable[bestIndex].subjectlistindex -= 1
		course_array[classarray[classIndex].courseIndex].noOfPeriodsAssigned -= 1
		//function 7 end
	}


//function 8
bool isRestricted(int periodIndex, int classIndex, int *arrayPointer):
	//arrayPointer can be teacherRestrictions[] and backtrackRestriciont[]
	For i, 0 -> arrayPointer.length - 1:
		If periodIndex == arrayPointer[i]:
			return true	
	
	return false

//function 9
Bool isFull(int periodIndex):
	If timetable[periodIndex].periodsubjectindex == capacity - 1:
		return true
	return false

//function 10
bool isOverlapping(int periodIndex, int classIndex):
	Periodsubjectlist = periodArray[periodIndex].periodsubjectlist
	for i, 0 -> timetable[periodIndex].periodsubjectindex:
		if periodsubjectlist[i].teacher.name = classarray[classIndex].teacher.name:
			return true
	
	For i, 0 ->  timetable[periodIndex].periodsubjectindex:
		For j, 0 -> timetable[periodIndex].periodsubjectlist[i].studentList.length:
			For k, 0 -> classArray[classIndex].studentList.length:
				if(timetable[periodIndex].periodsubjectlist[i].studentList[j]==
					classArray[classIndex].studentList[k]:
					Return true

	Return false
 
